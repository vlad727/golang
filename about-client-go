https://blog.kubesimplify.com/perform-crud-operations-on-kubernetes-using-golang
// define the namespace
namespace := "default"

// get the Pod interface (easy for later use)
podsClient := client.CoreV1().Pods(namespace) <<< CoreV1 function 

// read all pods
pods, err := podsClient.List(context.TODO(), metav1.ListOptions{})
if err != nil {
    panic(err.Error())
}
fmt.Printf("There are %d pods in the cluster\n", len(pods.Items))

// loop through pod list to get names
for i, pod := range pods.Items {
    fmt.Printf("Name of %dth pod: %s\n", i, pod.Name)
}
###
client.CoreV1().Pods(namespace) - In the previous article, we covered that the 
Kubernetes API resources are divided into different API Groups and versions. 
Now, Pod (a K8s resource) is found under the core group, having v1 as the version.

So, in this line we are first calling the CoreV1() function from the k8s.io/client-go/kubernetes 
package which returns a CoreV1Interface interface, which is a collection of some embedded interfaces 
of all the Kubernetes resources that fall under the core v1 API group: ### that fall under которые попадают под 

  type CoreV1Interface interface {
      RESTClient() rest.Interface
      ComponentStatusesGetter
      ConfigMapsGetter
      EndpointsGetter
      EventsGetter
      LimitRangesGetter
      NamespacesGetter
      NodesGetter
      PersistentVolumesGetter
      PersistentVolumeClaimsGetter
      PodsGetter  <<< interface 
      ...
  }
From here, we are then using the Pods() method included in the PodsGetter interface, which in 
turn returns the PodInterface interface, which is a collection of methods to work with the Pod resource:

  type PodInterface interface {
      Create(ctx context.Context, pod *v1.Pod, opts metav1.CreateOptions) (*v1.Pod, error)
      Update(ctx context.Context, pod *v1.Pod, opts metav1.UpdateOptions) (*v1.Pod, error)
      UpdateStatus(ctx context.Context, pod *v1.Pod, opts metav1.UpdateOptions) (*v1.Pod, error)
      Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
      DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
      Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.Pod, error)
      ...
  }

podsClient.List(…) - This one’s simple to understand! Here, we use the List() method defined under 
the PodInterface interface, which returns a PodList struct. The PodList struct represents a list of Kubernetes pods.

  type PodList struct {
      metav1.TypeMeta `json:",inline"`
      // Standard list metadata.
      // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      // +optional
      metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`

      // List of pods.
      // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
      Items []Pod `json:"items" protobuf:"bytes,2,rep,name=items"`
  }

